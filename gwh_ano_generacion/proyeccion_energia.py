{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1mzbgjjWOzuYtqjNnhjxuroEIknK3R5Jg","authorship_tag":"ABX9TyMcMuFFXyIFu4HDu+FXBgqy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KQE3tTmbZfVj","executionInfo":{"status":"ok","timestamp":1684923700052,"user_tz":-120,"elapsed":3332,"user":{"displayName":"Franco Fierro Olivares","userId":"01767969309738689660"}},"outputId":"38f0ac60-c06f-4e66-b199-8c38bee8f696"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import pandas as pd\n","\n","energy = pd.read_csv('/content/drive/MyDrive/Data/energy/gwh_ano/csv/energy.csv', delimiter=';')"],"metadata":{"id":"onkC3kJJax4h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["energy.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"o-7LrBbSbGfQ","executionInfo":{"status":"ok","timestamp":1684923700053,"user_tz":-120,"elapsed":16,"user":{"displayName":"Franco Fierro Olivares","userId":"01767969309738689660"}},"outputId":"157b1413-333f-440c-cb6f-17f5dbf9c6d1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   datetime otras_fuentes     eolica      solar otras_renovables  \\\n","0      2018    194.778,39  49.581,49  12.190,51         4.431,51   \n","1      2019    187.657,80  54.245,06  14.418,45         4.507,53   \n","2      2020    171.444,82  54.906,25  19.840,45         5.207,23   \n","3      2021    168.201,15  60.525,66  25.686,57         5.597,81   \n","4      2022    177.659,32  61.193,57  32.025,16         5.534,62   \n","\n","  %otras_fuentes %eolica %solar %otras_renovables  \n","0          74,6%   19,0%   4,7%              1,7%  \n","1          71,9%   20,8%   5,5%              1,7%  \n","2          68,2%   21,8%   7,9%              2,1%  \n","3          64,7%   23,3%   9,9%              2,2%  \n","4          64,3%   22,1%  11,6%              2,0%  "],"text/html":["\n","  <div id=\"df-72c0e8cc-3677-458c-b7b2-f61c2da2f2f4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>datetime</th>\n","      <th>otras_fuentes</th>\n","      <th>eolica</th>\n","      <th>solar</th>\n","      <th>otras_renovables</th>\n","      <th>%otras_fuentes</th>\n","      <th>%eolica</th>\n","      <th>%solar</th>\n","      <th>%otras_renovables</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018</td>\n","      <td>194.778,39</td>\n","      <td>49.581,49</td>\n","      <td>12.190,51</td>\n","      <td>4.431,51</td>\n","      <td>74,6%</td>\n","      <td>19,0%</td>\n","      <td>4,7%</td>\n","      <td>1,7%</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2019</td>\n","      <td>187.657,80</td>\n","      <td>54.245,06</td>\n","      <td>14.418,45</td>\n","      <td>4.507,53</td>\n","      <td>71,9%</td>\n","      <td>20,8%</td>\n","      <td>5,5%</td>\n","      <td>1,7%</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020</td>\n","      <td>171.444,82</td>\n","      <td>54.906,25</td>\n","      <td>19.840,45</td>\n","      <td>5.207,23</td>\n","      <td>68,2%</td>\n","      <td>21,8%</td>\n","      <td>7,9%</td>\n","      <td>2,1%</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021</td>\n","      <td>168.201,15</td>\n","      <td>60.525,66</td>\n","      <td>25.686,57</td>\n","      <td>5.597,81</td>\n","      <td>64,7%</td>\n","      <td>23,3%</td>\n","      <td>9,9%</td>\n","      <td>2,2%</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2022</td>\n","      <td>177.659,32</td>\n","      <td>61.193,57</td>\n","      <td>32.025,16</td>\n","      <td>5.534,62</td>\n","      <td>64,3%</td>\n","      <td>22,1%</td>\n","      <td>11,6%</td>\n","      <td>2,0%</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-72c0e8cc-3677-458c-b7b2-f61c2da2f2f4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-72c0e8cc-3677-458c-b7b2-f61c2da2f2f4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-72c0e8cc-3677-458c-b7b2-f61c2da2f2f4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["energy.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HAf6HYyYbH9f","executionInfo":{"status":"ok","timestamp":1684923700053,"user_tz":-120,"elapsed":14,"user":{"displayName":"Franco Fierro Olivares","userId":"01767969309738689660"}},"outputId":"977233ae-47fe-4da1-d0c0-4e40b5e57630"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 6 entries, 0 to 5\n","Data columns (total 9 columns):\n"," #   Column             Non-Null Count  Dtype \n","---  ------             --------------  ----- \n"," 0   datetime           6 non-null      int64 \n"," 1   otras_fuentes      6 non-null      object\n"," 2   eolica             6 non-null      object\n"," 3   solar              6 non-null      object\n"," 4   otras_renovables   6 non-null      object\n"," 5   %otras_fuentes     6 non-null      object\n"," 6   %eolica            6 non-null      object\n"," 7   %solar             6 non-null      object\n"," 8   %otras_renovables  6 non-null      object\n","dtypes: int64(1), object(8)\n","memory usage: 560.0+ bytes\n"]}]},{"cell_type":"code","source":["energy['otras_fuentes'] = energy['otras_fuentes'].str.replace('.', '')\n","energy['eolica'] = energy['eolica'].str.replace('.', '')\n","energy['solar'] = energy['solar'].str.replace('.', '')\n","energy['otras_renovables'] = energy['otras_renovables'].str.replace('.', '')"],"metadata":{"id":"Pg8jpGIjbjK2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["energy.head()"],"metadata":{"id":"_iMEj9XtcIaz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["energy['otras_fuentes'] = energy['otras_fuentes'].str.replace(',', '.')\n","energy['eolica'] = energy['eolica'].str.replace(',', '.')\n","energy['solar'] = energy['solar'].str.replace(',', '.')\n","energy['otras_renovables'] = energy['otras_renovables'].str.replace(',', '.')"],"metadata":{"id":"EkrxSGSCcKQ0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["energy.head()"],"metadata":{"id":"3bBMAgCVcM5s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["energy['otras_fuentes'] = pd.to_numeric(energy['otras_fuentes'])\n","energy['eolica'] = pd.to_numeric(energy['eolica'])\n","energy['solar'] = pd.to_numeric(energy['solar'])\n","energy['otras_renovables'] = pd.to_numeric(energy['otras_renovables'])"],"metadata":{"id":"84zInFcscOlt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["energy.info()"],"metadata":{"id":"61pa-WHQcSiF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["energy.to_csv('/content/drive/MyDrive/Data/Energía/GWh-año/df_gpt.csv', index=True)"],"metadata":{"id":"9B5HOfzTcUae"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Crear el nuevo dataframe con las filas faltantes entre 2022 y 2030\n","new_years = list(range(2023, 2030))\n","energy_lineal = pd.DataFrame({'datetime': new_years})\n","\n","# Obtener los valores históricos y el valor proyectado\n","historical_years = [2019, 2020, 2021, 2022]\n","projected_year = 2030\n","\n","for column in ['otras_fuentes', 'eolica', 'solar', 'otras_renovables']:\n","    historical_values = energy[column][:4]\n","    projected_value = energy[column][5]\n","    \n","    # Realizar la interpolación lineal\n","    interpolated_values = []\n","    for year in new_years:\n","        interpolated_value = historical_values[-1] + (projected_value - historical_values[-1]) * (year - historical_years[-1]) / (projected_year - historical_years[-1])\n","        interpolated_values.append(interpolated_value)\n","    \n","    # Agregar los valores interpolados al nuevo dataframe\n","    energy_lineal[column] = interpolated_values\n","\n","# Mostrar el nuevo dataframe con los valores proyectados\n","print(energy_lineal)\n"],"metadata":{"id":"C99_jcgCdG66"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Crear el nuevo dataframe con las filas faltantes entre 2022 y 2030\n","new_years = list(range(2023, 2030))\n","energy_lineal = pd.DataFrame({'datetime': new_years})\n","\n","# Obtener los valores históricos y el valor proyectado\n","historical_years = [2019, 2020, 2021, 2022]\n","projected_year = 2030\n","\n","for column in ['otras_fuentes', 'eolica', 'solar', 'otras_renovables']:\n","    historical_values = energy[column][:4]\n","    projected_value = energy[column][5]\n","    \n","    # Realizar la interpolación lineal\n","    interpolated_values = []\n","    for i, year in enumerate(new_years):\n","        interpolated_value = historical_values[-1] + (projected_value - historical_values[-1]) * (year - historical_years[-1]) / (projected_year - historical_years[-1])\n","        interpolated_values.append(interpolated_value)\n","    \n","    # Agregar los valores interpolados al nuevo dataframe\n","    energy_lineal[column] = interpolated_values\n","\n","# Mostrar el nuevo dataframe con los valores proyectados\n","print(energy_lineal)\n"],"metadata":{"id":"lVE2taEGhTOI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Crear el nuevo dataframe con las filas faltantes entre 2022 y 2030\n","new_years = list(range(2023, 2030))\n","new_df = pd.DataFrame({'datetime': new_years})\n","\n","# Obtener los valores históricos y el valor proyectado\n","historical_years = [2019, 2020, 2021, 2022]\n","projected_year = 2030\n","\n","for column in ['otras_fuentes', 'eolica', 'solar', 'otras_renovables']:\n","    historical_values = energy.loc[energy['datetime'].isin(historical_years), column].values\n","    projected_value = energy.loc[energy['datetime'] == projected_year, column].values[0]\n","\n","    # Realizar la interpolación lineal\n","    interpolated_values = []\n","    for year in new_years:\n","        interpolated_value = historical_values[-1] + (projected_value - historical_values[-1]) * (year - historical_years[-1]) / (projected_year - historical_years[-1])\n","        interpolated_values.append(interpolated_value)\n","\n","    # Agregar los valores interpolados al nuevo dataframe\n","    new_df[column] = interpolated_values\n","\n","# Mostrar el nuevo dataframe con los valores proyectados\n","print(new_df)\n"],"metadata":{"id":"dxn7Ef_ghpBo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_df.to_csv('/content/drive/MyDrive/Data/Energía/GWh-año/energy_proyectado.csv', index=True)"],"metadata":{"id":"FT1-raUMh6xr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Si bien se ejecutó correctamente, al parecer los datos no son correctos. Aunque aún puede tratarse de un problema de 'tratamiento correcto' de los datos.\n","Pero lo que yo creo, es que hay que realizar la proyección sin considerar los datos de 2030, sino que únicamente realizarlo con los datos históricos."],"metadata":{"id":"zMV8t_cajTmp"}}]}